import discord
from discord.ext import commands
from discord import FFmpegPCMAudio
from discord import Member
from discord.ext.commands import has_permissions, MissingPermissions


intents = discord.Intents.all()
intents.members = True

queues = {}

def check_q(ctx, id):
    if queues[id] != []:
        voice = ctx.guild.voice_client
        source = queues[id].pop(0)
        player = voice.play(source)


client = commands.Bot(command_prefix='!', intents=discord.Intents.all())


@client.event
async def on_ready():
    print("Div jest gotowy.")
    print("-----------------------------")


@client.command()
async def hej(ctx):
    await ctx.send("Cześć!")

@client.event
async def on_member_join(member):
    channel = client.get_channel(1155238879041962047)
    await channel.send("Witaj")

@client.event
async def on_member_remove(member):
    channel = client.get_channel(1155238879041962047)
    await channel.send("Żegnaj :(")


@client.command(pass_context = True)
async def join(ctx):
    if (ctx.author.voice):
        channel = ctx.message.author.voice.channel
        voice = await channel.connect()
        source = FFmpegPCMAudio('b.wav')
        player = voice.play(source)

    else:
        await ctx.send("Musisz być na kanale głosowym żeby użyć tej komendy!")


@client.command(pass_context = True)
async def leave(ctx):
    if (ctx.voice_client):
        await ctx.guild.voice_client.disconnect()
        await ctx.send("Opuściłem kanał głosowy.")
    else:
        await ctx.send("Nie jestem na kanale głosowym!")

@client.command(pass_context = True)
async def pause(ctx):
    voice = discord.utils.get(client.voice_clients,guild=ctx.guild)
    if voice.is_playing():
        voice.pause()
    else:
        await ctx.send("Żaden dźwięk nie jest teraz odtwarzany!")

@client.command(pass_context = True)
async def resume(ctx):
    voice = discord.utils.get(client.voice_clients,guild=ctx.guild)
    if voice.is_paused():
        voice.resume()
    else:
        await ctx.send("Muzyka jest obecnie odtwarzana!")

@client.command(pass_context = True)
async def stop(ctx):
    voice = discord.utils.get(client.voice_clients,guild=ctx.guild)
    voice.stop()

@client.command(pass_context = True)
async def play(ctx, arg):
    voice = ctx.guild.voice_client
    song = arg + '.wav'
    source = FFmpegPCMAudio(song)
    player = voice.play(source, after=lambda x=None: check_q(ctx, ctx.message.guild.id))

@client.command()
async def q(ctx, arg):
    voice = ctx.guild.voice_client
    song = arg + '.wav'
    source = FFmpegPCMAudio(song)

    guild_id = ctx.message.guild.id

    if guild_id in queues:
        queues[guild_id].append(source)
    
    else:
        queues[guild_id] = [source]

    await ctx.send("Dodane do kolejki!")

#Event na usuwanie listy wiadomości
@client.event
async def on_message(message):

    if message.content == "":
        await message.delete()
        await message.channel.send("")


@client.command()
@has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason=None):
    await member.kick(reason=reason)
    await ctx.send(f'Użytkownik {member} został wyrzucony.')

@kick.error
async def kick_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("Nie masz odpowiednich uprawnień do tej komendy!")

@client.command()
@has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason=None):
    await member.ban(reason=reason)
    await ctx.send(f'Użytkownik {member} został zbanowany.')

@ban.error
async def ban_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("Nie masz odpowiednich uprawnień do tej komendy!")



@client.command()
async def embed(ctx):
    embed = discord.Embed(title="Profil", url="https://google.com", description="O mnie", color=0xa751ed)
    await ctx.send(embed=embed)




client.run('MTE1NTIzNDM3NTg0NDIzMzMxNg.GDNO9g.DeBpLKS_yGPUJfrtNmoURk5IHL2U68xFm2lklw')










    @nextcord.slash_command(description="Odpal muzykę", guild_ids=[ServerID])
    async def play(self, interaction: Interaction, channel: GuildChannel = SlashOption(channel_types=[ChannelType.voice], description="Na jaki kanał wejść"), search: str = SlashOption(description="Nazwa utworu")):
        search = await wavelink.YouTubeTrack.search(query=search, return_first=True)
        if not interaction.guild.voice_client:
            vc: wavelink.Player = await channel.connect(cls=wavelink.Player)
        elif not getattr(interaction.author.voice, "channel", None):
            return await interaction.send("Nie ma Ciebie na żadnym kanale głosowym!")
        else:
            vc: wavelink.Player = interaction.guild.voice_client
            
        if vc.queue.is_empty and not vc.is_playing():
            await vc.play(search)
            await interaction.send(f'Teraz słuchasz `{search.title}`')
        else:
            await vc.queue.put_wait(search)
            await interaction.send(f'Dodano `{search.title}` do kolejki.')